name: Build
on:
  push:
    tags:
    branches:
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgress
          POSTGRES_PASSWORD: passwprd
          POSTGRES_DB: omero
          max_wal_size: 4GB
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres2:
        image: postgres:16
        env:
          POSTGRES_USER: postgress
          POSTGRES_PASSWORD: passwprd
          POSTGRES_DB: omero_train
          max_wal_size: 4GB

        ports:
          - 5433/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: elasticsearch:8.8.1
        ports:
          - 9200/tcp
        env:
          es_api_basic_auth_username: "elastic"
          ELASTIC_PASSWORD: "elasticsearch_user_password"

        options: -e="discovery.type=single-node" --health-cmd="curl -k -u elastic:elasticsearch_user_password  https://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      #test the app before bulding the image
      - name: Install dependencies and test
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt;
          # Configure database url          
          #python manage.py set_database_configuration -u localhost -s  ${{ job.services.postgres.ports[5432] }} -n postgress -p passwprd -w omero1 -d omero -b omero.pgdump          
        
          export PGPASSWORD=passwprd;
          echo $PGPASSWORD
          export PGPASSWORD=passwprd; psql -h localhost -U postgres -p ${{ job.services.postgres.ports[5432] }} -c 'CREATE DATABASE omero_train'
 

  upload:
    needs: build
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    env:
      name: openmicroscopy/omero-searchengine
    steps:
      - name: Get prefix
        id: getprefix
        run: |
          if [ ! -z ${{ env.name }} ]; then
            echo "prefix=${{ env.name }}:" >> $GITHUB_OUTPUT
          else
            echo "prefix=${{ github.repository }}:" >> $GITHUB_OUTPUT
          fi
      - name: Get other tags
        id: gettags
        uses: jupyterhub/action-major-minor-tag-calculator@v1.1.0
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          prefix: "${{ steps.getprefix.outputs.prefix }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: display docker account
        run: echo ${{ secrets.DOCKER_LOGIN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: deployment/docker/rockylinux/Dockerfile
          push: true
          tags: ${{ join(fromJson(steps.gettags.outputs.tags)) }}
